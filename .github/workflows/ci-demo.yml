name: CI pipeline - demo

on:
  push:
    branches:
      - ci-demo
      - setup
      - start
      - step1
      - step2
      - step3
      - step4
      - step5
      - step6
      - step7
      - step8
      - step9
    paths:
      - '*.*'
      - '!README-md'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:

  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
     - name: Install requirements
       run: sudo apt-get install -y git make python3 curl jq bat
     - name: Check docker
       run: docker info || exit

  start:
    name: Start
    needs: setup
    runs-on: ubuntu-latest
    steps:
     - name: Clone the repository
       uses: actions/checkout@v2
       with:
         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
     - name: Moving to start
       run: git checkout start
     - name: Install requirements
       run: make verify || make setup
     - name: Define metadata for commits
       run: |
         git config user.name "Your Name"
         git config user.email "your@mail.com"
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step1:
    name: Step1
    runs-on: ubuntu-latest
    needs: [setup, start]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: repo-artifact
      - name: Moving to step1
        run: git checkout step1
      - name: Add a line with config.ini in gitignore
        run: |
          sed -i -- 's/#config.ini/config.ini/g' .gitignore
          #echo config.ini >> .gitignore
      - name: Create and fill out config.ini file locally
        run: cp -v samples/config.ini.sample config.ini
      - name: Ensure that the private config.ini is ignored
        run: |
          grep -r --color config.ini .gitignore | grep -v "#"
          git check-ignore -v config.ini
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: repo-artifact
          path: /home/runner/work/secure-git-workshop/secure-git-workshop/
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: repo-artifact
          path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step2:
    name: Step2
    runs-on: ubuntu-latest
    needs: [setup, start, step1]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step2
       run: git checkout step2
     - name: Install talisman as a pre-commit hook
       run: |
         TERM=xterm make talisman_setup
         ls -la samples/
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/
 
  step3:
    name: Step3
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step3
       run: |
         git status
         git checkout step3 -f
     - name: Create dependabot yaml template
       run: cp -av samples/dependabot.yml.sample .github/dependabot.yml 
     - name: Define software out-dated libraries
       run: echo "requests==2.23.0" > requirements.txt
     - name: Run dependency scan locally
       run: make dependency_scan 
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step4:
    name: Step4
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step4
       run: |
         git status
         git checkout step4 -f
     - name: Sonarcloud scan
       uses: SonarSource/sonarcloud-github-action@master
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step5:
    name: Step5
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3, step4]
    env:
      ENV: "dev"
      DELETE_FLAG: "true"
      TARGET_API_DEF: "py-web/openapi.json"
      API_REPORT_FILE: "api_report.json"
      CONTAINER_NAME: "zap2docker_scan"
      APP_DIR: "rest-api-goat"
      REPORT_FOLDER: "reports"
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step5
       run: |
         git status
         git checkout step5 -f
     - name: Cleanup docker-compose data
       run: |-
         pushd "${{env.APP_DIR}}"
         if [ "${{env.DELETE_FLAG}}" == "true" ]
         then
           docker-compose rm -f web
           docker-compose rm -f py-web
           docker-compose rm -f zap2docker
         fi
         popd
     - name: Run REST API Goat
       run: |-
         pushd "${{env.APP_DIR}}"
         docker-compose build --no-cache web
         docker-compose up -d web
         docker-compose logs web
         popd
     - name: Serve Goat OpenAPI definition
       run: |-
         pushd "${{env.APP_DIR}}"
         docker-compose build --no-cache py-web
         docker-compose up -d py-web
         docker-compose logs py-web
         popd
     - name: Launch API scan
       env:
         GOAT_API_TOKEN: ${{ secrets.GOAT_API_TOKEN }}
       run: |-
         pushd "${{env.APP_DIR}}"
         test -d "${REPORT_FOLDER}" || mkdir -p "${REPORT_FOLDER}"
         docker-compose run --name "${{env.CONTAINER_NAME}}" -d -e ENV="${{env.ENV}}" -e REPORT_FILE="${{env.API_REPORT_FILE}}" -e TARGET="${{env.API_TARGET}}" zap2docker
         docker logs -f "${{env.CONTAINER_NAME}}"
         popd
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step6:
    name: Step6
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3, step4, step5]
    env:
      API_KEY: ${{ secrets.OPEN_WHEATHER_API }}
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step6
       run: |
         git status
         git checkout step6 -f
     - name: Build the image
       run: make build
     - name: Read the key into a local environment variable
       run: |
        - API_KEY="${{env.API_KEY}}"
        - echo $API_KEY
     - name: Spin up the container
       run: API_KEY="${{env.API_KEY}}" make run       
     - name: Run the container scanning
       run: make container_scanning
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step7:
    name: Step7
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3, step4, step5, step6]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step7
       run: |
         git status
         git checkout step7 -f
     - name: Commit dummy secrets
       run: |
         echo username:password | rev >> supersecrets.txt
         echo AKIAIOSFODNN7EXAMPLE | rev >> supersecrets.txt
     - name: Remove a file or any content with the secret
       run: |
         rm -- "supersecrets.txt"
         make fix
     - name: Prevent future commits
       run: |
         echo supersecrets.txt >> .gitignore
         echo "YOUR_FILE_WITH_SENSITIVE_DATA" >> .gitignore
     - name: Purge file from all commits and branches
       run: (bfg --delete-files supersecrets.txt | SENSITIVE_FILE=supersecrets.txt make delete)
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step8:
    name: Step8
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3, step4, step5, step6, step7]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step8
       run: |
         git status
         git checkout step8 -f
     - name: Identify your secret
       run: make secret_detection
     - name: Set up QEMU
       uses: docker/setup-qemu-action@v1
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v1
     - name: Login to DockerHub
       uses: docker/login-action@v1 
       with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}
     - name: Build and push
       id: docker_build
       uses: docker/build-push-action@v2
       with:
         file: Dockerfile
         push: true
         tags: arainho/git-insecure-workshop:latest
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/

  step9:
    name: Step9
    runs-on: ubuntu-latest
    needs: [setup, start, step1, step2, step3, step4, step5, step6, step7, step8]
    steps:
     - name: Download artifacts
       uses: actions/download-artifact@v2
       with:
         name: repo-artifact
     - name: Moving to step9
       run: |
         git status
         git checkout step9 -f
     - name: Bleed it locally ...
       run: |
         git config user.email "HARDCODED ... ⚡⚡⚡ secure-password"
         git config user.name "Gitbleed demo" 
     - name: Will I or my business be affected?
       run: |
         echo "Check current metadata (name + email)"
         git config --get user.name        
         git config --get user.email
         echo;
         echo "Check metadata history"
         git log | grep Author | grep -v @
         git log --pretty="%an <%ae>" | sort | uniq
     - name: You finish the workshop ...
       run: echo "congrats! 🎉"
     - name: Upload artifacts
       uses: actions/upload-artifact@v3
       with:
         name: repo-artifact
         path: /home/runner/work/secure-git-workshop/secure-git-workshop/
